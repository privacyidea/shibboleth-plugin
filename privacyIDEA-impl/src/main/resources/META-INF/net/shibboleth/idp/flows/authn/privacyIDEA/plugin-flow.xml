<flow xmlns="http://www.springframework.org/schema/webflow" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.springframework.org/schema/webflow http://www.springframework.org/schema/webflow/spring-webflow.xsd"
      parent="authn.abstract, authn/conditions">

    <!-- This is a login flow for multifactor authentication against the privacyIDEA -->
    <action-state id="initPIContext">
        <evaluate expression="initPIContext"/>
        <evaluate expression="'proceed'"/>

        <transition on="displayUsernamePasswordForm" to="displayUsernamePasswordForm"/>
        <transition on="proceed" to="checkAuthenticationFlow"/>
    </action-state>

    <view-state id="displayUsernamePasswordForm" view="privacyIDEA/usernamePasswordForm">
        <on-render>
            <evaluate expression="environment" result="viewScope.environment"/>
            <evaluate expression="opensamlProfileRequestContext" result="viewScope.profileRequestContext"/>
            <evaluate expression="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.authn.context.AuthenticationContext))"
                      result="viewScope.authenticationContext"/>
            <evaluate expression="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.profile.context.ProfileInterceptorContext))"
                      result="viewScope.interceptorContext"/>
            <evaluate expression="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.profile.context.RelyingPartyContext))"
                      result="viewScope.rpContext"/>
            <evaluate expression="authenticationContext.getSubcontext(T(net.shibboleth.idp.ui.context.RelyingPartyUIContext))"
                      result="viewScope.rpUIContext"/>
            <evaluate expression="authenticationContext.getSubcontext(T(net.shibboleth.idp.authn.context.AuthenticationErrorContext))"
                      result="viewScope.authenticationErrorContext"/>
            <evaluate expression="authenticationContext.getSubcontext(T(net.shibboleth.idp.authn.context.AuthenticationWarningContext))"
                      result="viewScope.authenticationWarningContext"/>
            <evaluate expression="T(net.shibboleth.utilities.java.support.codec.HTMLEncoder)" result="viewScope.encoder"/>
            <evaluate expression="flowRequestContext.getExternalContext().getNativeRequest()" result="viewScope.request"/>
            <evaluate expression="flowRequestContext.getExternalContext().getNativeResponse()" result="viewScope.response"/>
            <evaluate expression="flowRequestContext.getActiveFlow().getApplicationContext().containsBean('shibboleth.CustomViewContext')
                      ? flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.CustomViewContext') : null"
                      result="viewScope.custom"/>

            <evaluate expression="authenticationContext.getSubcontext(T(org.privacyidea.context.PIContext))" result="viewScope.piContext"/>
            <evaluate expression="authenticationContext.getSubcontext(T(org.privacyidea.context.PIFormContext))" result="viewScope.piFormContext"/>
        </on-render>

        <!-- Save collected username and password in shibb, or initialize the passkey authentication -->
        <transition on="proceed" to="piAuthenticator"/>
    </view-state>

    <action-state id="checkAuthenticationFlow">
        <evaluate expression="alternativeAuthenticationFlows"/>
        <evaluate expression="'proceed'"/>

        <transition on="proceed" to="displayPrivacyIDEAForm"/>
        <transition on="success" to="proceed"/>
    </action-state>

    <view-state id="displayPrivacyIDEAForm" view="privacyIDEA/main">
        <on-render>
            <evaluate expression="environment" result="viewScope.environment"/>
            <evaluate expression="opensamlProfileRequestContext" result="viewScope.profileRequestContext"/>
            <evaluate expression="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.authn.context.AuthenticationContext))"
                      result="viewScope.authenticationContext"/>
            <evaluate expression="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.profile.context.ProfileInterceptorContext))"
                      result="viewScope.interceptorContext"/>
            <evaluate expression="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.profile.context.RelyingPartyContext))"
                      result="viewScope.rpContext"/>
            <evaluate expression="authenticationContext.getSubcontext(T(net.shibboleth.idp.ui.context.RelyingPartyUIContext))"
                      result="viewScope.rpUIContext"/>
            <evaluate expression="authenticationContext.getSubcontext(T(net.shibboleth.idp.authn.context.AuthenticationErrorContext))"
                      result="viewScope.authenticationErrorContext"/>
            <evaluate expression="authenticationContext.getSubcontext(T(net.shibboleth.idp.authn.context.AuthenticationWarningContext))"
                      result="viewScope.authenticationWarningContext"/>
            <evaluate expression="T(net.shibboleth.utilities.java.support.codec.HTMLEncoder)" result="viewScope.encoder"/>
            <evaluate expression="flowRequestContext.getExternalContext().getNativeRequest()" result="viewScope.request"/>
            <evaluate expression="flowRequestContext.getExternalContext().getNativeResponse()" result="viewScope.response"/>
            <evaluate expression="flowRequestContext.getActiveFlow().getApplicationContext().containsBean('shibboleth.CustomViewContext')
                      ? flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.CustomViewContext') : null"
                      result="viewScope.custom"/>

            <evaluate expression="authenticationContext.getSubcontext(T(org.privacyidea.context.PIContext))" result="viewScope.piContext"/>
            <evaluate expression="authenticationContext.getSubcontext(T(org.privacyidea.context.PIFormContext))" result="viewScope.piFormContext"/>
        </on-render>

        <transition on="proceed" to="piAuthenticator"/>
        <transition on="reset" to="RestartAuthentication"/>
    </view-state>

    <action-state id="piAuthenticator">
        <evaluate expression="piAuthenticator"/>

        <transition on="reload" to="displayPrivacyIDEAForm"/>
        <transition on="abort" to="RestartAuthentication"/>
        <transition on="validatePasskeyResp" to="ValidatePasskeyResponse"/>
        <transition on="success" to="proceed"/>
    </action-state>

    <action-state id="ValidatePasskeyResponse">
        <evaluate expression="validatePasskeyResponse" />

        <transition on="UnknownPasskeys" to="RestartAuthentication" />
        <transition on="success" to="proceed" />
    </action-state>

    <bean-import resource="plugin-beans.xml"/>
</flow>